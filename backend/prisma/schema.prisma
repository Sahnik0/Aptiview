generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  clerkId           String   @unique
  role              Role?
  recruiterProfile  RecruiterProfile?
  candidateProfile  CandidateProfile?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model RecruiterProfile {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
  company   String
  industry  String?
  jobs      Job[]
}

model CandidateProfile {
  id          String  @id @default(cuid())
  user        User    @relation(fields: [userId], references: [id])
  userId      String  @unique
  education   String?
  experience  String?
  skills      String?
  applications Application[]
}

enum Role {
  RECRUITER
  CANDIDATE
}

model Job {
  id           String   @id @default(cuid())
  title        String
  description  String
  recruiter    RecruiterProfile @relation(fields: [recruiterId], references: [id])
  recruiterId  String
  applications Application[]
  createdAt    DateTime @default(now())
  location     String
  type         String
}

model Application {
  id            String   @id @default(cuid())
  candidate     CandidateProfile @relation(fields: [candidateId], references: [id])
  candidateId   String
  job           Job      @relation(fields: [jobId], references: [id])
  jobId         String
  interview     Interview?
  status        ApplicationStatus @default(PENDING)
  createdAt     DateTime @default(now())
}

enum ApplicationStatus {
  PENDING
  INTERVIEW_SCHEDULED
  INTERVIEW_COMPLETED
  SHORTLISTED
  REJECTED
}

model Interview {
  id            String   @id @default(cuid())
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId String   @unique
  startedAt     DateTime
  endedAt       DateTime?
  score         InterviewScore?
  videoUrl      String?
  audioUrl      String?
  aiSummary     String?
}

model InterviewScore {
  id           String   @id @default(cuid())
  interview    Interview @relation(fields: [interviewId], references: [id])
  interviewId  String   @unique
  totalScore   Float
  details      Json
}
